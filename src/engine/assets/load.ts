namespace G {
    // Generated by Grunt; not intended for access outside of loading sequence
    export var _GAME_DATA: {
        levels: splitTime.level.FileData[]
        musicFiles: string[]
        preloadedImageFiles: string[]
        soundEffectFiles: string[]
    }
}

namespace splitTime {
    export function load(perspective: Perspective): PromiseLike<void> {
        const loadingScreen = new LoadingScreen(perspective.view)
        loadingScreen.show()

        var masterData = G._GAME_DATA
        var itemsToLoad =
            masterData.levels.length + masterData.preloadedImageFiles.length
        var itemsLoaded = 0
        var promiseCollection: PromiseLike<void>[] = []

        function incrementAndUpdateLoading() {
            itemsLoaded++
            loadingScreen.show(Math.round((itemsLoaded / itemsToLoad) * 100))
        }

        G.ASSETS = new splitTime.Assets(splitTime.getScriptDirectory())

        for (const preloadedImageFileName of masterData.preloadedImageFiles) {
            promiseCollection.push(
                G.ASSETS.images
                    .load("preloaded/" + preloadedImageFileName, preloadedImageFileName, true)
                    .then(incrementAndUpdateLoading)
            )
        }

        for (const musicFileName of masterData.musicFiles) {
            G.ASSETS.audio.registerMusic(musicFileName)
        }
        for (const soundFxFile of masterData.soundEffectFiles) {
            G.ASSETS.audio.registerSoundEffect(soundFxFile)
        }

        for (const levelData of masterData.levels) {
            var levelName = levelData.fileName.replace(/\.json$/, "")
            var level = perspective.world.getLevel(levelName)
            promiseCollection.push(
                level.load(perspective.world, levelData).then(incrementAndUpdateLoading)
            )
        }

        return Promise.all(promiseCollection).then()
    }
}
