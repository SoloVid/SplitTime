This file is here as a mixture of TODOs and implementation thought experiments. Since opportunities to work on the engine are sparse, my thoughts here help me to keep track of what I've been thinking.

Let's call "Bodys" NPCs in this doc.

- Events, particularly paths, ought to be easy to set up.
- API should allow developer to easily specify an event where NPC moves through a series of positions.
- Since we already have traces in the level editor, it would be cool to be able to make path traces.
    - Path traces ought to be able to bind to positions (one-way or two-way?) so that the engine knows how to handle a call to move from one position to another.
    - Positions ought to be able to bind to multiple paths, but there probably would never be a case to allow two different paths between the same two positions.
- Traces could be more exposed to the developer.
    - Allow developer to access traces anytime?
    - Let developer define different traces and the behavior of loading them in?
        - Maybe better to abstract out of editor but still leave in engine code.
- Events could be easily set up as a series of waypoint positions
    - Some positions would be linked by paths (e.g. Bob's front door to town entrance) and some not (e.g. Bob's front door to inside)
    - Potentially there could be a third option of runtime straight path between two positions. This would be useful for moving NPCs into a crowd.
    - Arbitrary wait times could be allowed at each position.
    - Arbitrary function execution should be allowed at each position.
    - If player is on the board, NPC walks path.
    - If player is off board, some kind of wait time is calculated and substituted for actually walking the path. How does this work exactly? What should happen if player walks in during the middle of what should be a path event?
    - If play walks off board during walk path, NPC should stop and something like the above point should happen.
    - Maybe calculate remaining time, wait that long, but if player interrupts that time we fast forward to where we should have been walking? The catch-up will probably be expensive, but we are still saving by not walking everyone on every board. Also, load time between boards is probably acceptable.
- Event structure
    - Pieces should only know about the next event to happen.
    - Event chains should not all be queued at initialization.
    - We need to allow joining of event chains (e.g. when both people arrive, do something).
    - Events should be specified entirely independently of NPCs.
- Save/load considerations
    - If current event is the only thing that is in dynamic memory, we only need to store it on save. This means each piece of chain needs to have an ID so we can later match up the current event to its reconstructed static-memory equivalent.
    - Perhaps have user specify an ID for a chain and then automatically tack on a counter to each piece?
    - What about dynamic events (i.e. events not hard-defined in code, perhaps parameterized based on template and player decisions)? Do they exist? How do we handle them? Maybe still reference a static event but perhaps allow developer to attach a simple parameter object to the event chain which will be saved.

### Conversation

- Add ellipses for unseen characters in dialog (i.e. before user is able to see dialog)
- Add line sequence between everything else
