This file is here as a mixture of TODOs and implementation thought experiments. Since opportunities to work on the engine are sparse, my thoughts here help me to keep track of what I've been thinking.

- Sprite-splitting in rendering to allow for water, tall grass, etc.
- Level editor enhancements
    - Allow reload assets (maybe)
    - Auto-complete drop-downs instead of blank text fields
- Cache busting
    - Include modified time in query string for assets
    - Set Cache-Control no-store for game.js
- Traces could be more exposed to the developer.
    - Allow developer to access traces anytime?
    - Let developer define different traces and the behavior of loading them in?
        - Maybe better to abstract out of editor but still leave in engine code.
- Event structure
    - Pieces should only know about the next event to happen.
    - Event chains should not all be queued at initialization.
    - We need to allow joining of event chains (e.g. when both people arrive, do something).
    - Events should be specified entirely independently of NPCs.
- Save/load considerations
    - If current event is the only thing that is in dynamic memory, we only need to store it on save. This means each piece of chain needs to have an ID so we can later match up the current event to its reconstructed static-memory equivalent.
    - Perhaps have user specify an ID for a chain and then automatically tack on a counter to each piece?
    - What about dynamic events (i.e. events not hard-defined in code, perhaps parameterized based on template and player decisions)? Do they exist? How do we handle them? Maybe still reference a static event but perhaps allow developer to attach a simple parameter object to the event chain which will be saved.
- Add ellipses for unseen characters in dialog (i.e. before user is able to see dialog)
