#!/usr/bin/env node

const { fork } = require("node:child_process")
const chokidar = require('chokidar')

const command = process.argv[2]
const childArgs = process.argv.slice(3)

const isWatch = childArgs.includes("--watch")
const buildScript = "../lib/project-build-cli.js"
const serveScript = "../lib/editor-server.js"

const runScript = isWatch ? runAndWatchScript : runScriptOnce

switch (command) {
    case "build":
        runScript(buildScript, childArgs)
        break
    case "dev":
        runAndWatchScript(buildScript, ["--watch", ...childArgs])
        runAndWatchScript(serveScript, childArgs)
        break
    case "serve":
        runScript(serveScript, childArgs)
        break
    default:
        console.error(`Unrecognized command "${command}"; expected "build", "dev", or "serve"`)
        process.exit(1)
}

function runScriptOnce(scriptPath, args) {
    const actualPath = require.resolve(scriptPath)
    fork(actualPath, args, {
        stdio: "inherit"
    })
}

function runAndWatchScript(scriptPath, args) {
    const actualPath = require.resolve(scriptPath)
    let controller = null
    function kickOff() {
      controller = new AbortController()
      const child = fork(actualPath, args, {
        execArgv: ["--enable-source-maps"],
        signal: controller.signal,
        stdio: "inherit",
      })
      child.on("error", (e) => {
        if (e.code !== "ABORT_ERR") {
          console.error(e)
        }
      })
    }
    chokidar.watch(actualPath, {
      ignoreInitial: true,
    }).on("all", (event, path) => {
      console.log(`Change detected: ${path}`)
      controller.abort()
      kickOff()
    })
    kickOff()
}
